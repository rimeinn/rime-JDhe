# Rime schema
# encoding: utf-8

schema:
  schema_id: jde_fixed
  name: 简单鹤·字词
  icon: ico/鹤.ico           # string 方案图标，格式： .ico
  version: "2025.07.27"
  author:
    - Rime schema by zHon     
    - 简单鹤字根码表 by 简单
  description: |
    音形输入方案
    敲 ` 鍵進入双拼反查      
  dependencies:
    - reverse_pinyin   # 拼音单字反查
    - melt_eng # 英文
    - tiger  # 虎码
    - jde  # 简单鹤 
    - radical_pinyin   # 部件拆字
    - stroke   # 五筆畫
    - charset   # 字集过滤

__include: config_base:/switches_engine_table        # Rime模块
__include: config_base:/opencc_config
__include: config_base:/reverse_config                # 反查模块
__include: config_base:/Lua_config                    # 自定义模块
__include: config_base:/recognizer_config             # 识别器模块


# 拼写设定
speller:                                            
  alphabet: "zyxwvutsrqponmlkjihgfedcba;/NUO`"                 # 不直接上屏的标点
#  initials: 'abcdefghijklmnopqrstuvwxyz;/ZYXWVUTSRQPONMLKJIHGFEDCBA'                   # 可以作为第一位的「引导键」 
  delimiter: "'"     # 上屛时的音节间分音符
  max_code_length: 4  # 形码最大码长，超过则顶字上屛  
  auto_select: true   #是否开启无重码时自动上屏（仅在编码吻合时判断）
#  auto_select_pattern: ^;\w+|^\w{4}$   #自动上屏规则  对 [;] 引导的编码实行候选唯一自动上屏， 若要添加四码上屏功能，在  ^;\w+ 后面 加上  |^\w{4}$  ，以此类推。直接注释禁用则达最大码长后，无重码时自动上屏
  auto_select_pattern: ^;\w+|^o\w{3}$
  auto_clear: max_length # 3种选择， manual|auto|max_length 空码按下一键确认清屏|空码自动清|达到最长码时后码顶上清屏
  algebra:
    - xform/^\*//  # 特码以星号开头，以便在全码后置脚本中区分，以防识别为全码

# 主翻译器
translator:
  dictionary: jde_fixed                            # 挂载词库
  enable_charset_filter: false          # 字符集过滤（低重形码用不着）
  enable_encoder: false                  # 是否启用 自动造词  
  enable_sentence: false                 # 是否启用造句模式
  encode_commit_history: false     # 是否对已上屛词自动成词  
  enable_completion: false              # 编码提示开关（提前显示尚未输入完整码的字）
  enable_user_dict: false                 # 是否启用用户词典（记录动态字词频、自造词）
#  max_phrase_length: 4                  #最大自动成词 词长
  initial_quality: 3                            # 主词库 初始权重应比其他高  
  comment_format:  #提示码自定义
    - "xform/~/ /" #去掉编码提示前的~号
    # - "xform/^/ /" #提示前面 +间距


# 标点符号
punctuator:
  import_preset: symbols  # 从 default.yaml 继承通用的 

# 快捷键设置
key_binder:
#  import_preset: default  # 从 default.yaml 继承通用的 
# Lua 配置: 以词定字
  select_first_character: "Shift+exclam"  # 以词定字 shift+1 [(第一个字)
  select_last_character:  "Shift+at"  # 以词定字句号 shift+2 (最后一个字) 
  custom_bindings:
    __append: 
      # 在這裏添加只在本方案中生效的按鍵綁定
      # 打字时，' 选中第3个候选字发送 (音码方案需要此键 分词，形码单独启用)
      - { accept: apostrophe, send: 3, when: has_menu}       
      # 简单鹤字根拆分显示开关
      - { when: has_menu, accept: "Control+i", toggle: chaifen }  
    # Lua配置：顶词空格单 空格次选
#      - {accept: " ", match: "[a-z]{4}", send_sequence: 2}
    # Lua配置：顶词空格单 ` or / 首选
#      - {accept: "`", match: "[a-z]{4}", send_sequence: 1}
#      - {accept: "/", match: "[a-z]{4}", send_sequence: 1}
  bindings:
    __patch: 
      - :/key_binder/custom_bindings?
      - config_base:/key_config/options_toggle
      - config_base:/key_config/tab_Page
      - config_base:/key_config/keys

__patch:
  # 英文临时输入标识
  - 'engine/segmentors/@after 01': affix_segmentor@Eng 
  # 英文临时输入（E）
  - 'engine/translators/@after 02': table_translator@Eng
##################################################
  # 临时小鹤双拼标识
  - 'engine/segmentors/@after 02': affix_segmentor@double_pinyin_flypy
  # 音码翻译器 临时小鹤双拼混输
  - 'engine/translators/@after 03': script_translator@double_pinyin_flypy
##################################################
  # 中英混合词汇
  - 'engine/translators/@after 04': table_translator@cn_en    
##################################################
  # 简单鹤拆分滤镜
  - 'engine/filters/@after 06': simplifier@chaifen
##################################################

##################################################

  - switches/+: 
    - name: chaifen
      states: [ 不拆, 扌斥 ]
##################################################

  # 反查显示编码的词库
  - reverse_lookup_filter/dictionary: JDhe 

##################################################

  # 响应 临时英文输入
  - recognizer/patterns/Eng: "^E[A-Z|a-z]*`?$"  
  # 响应 小鹤双拼临时输入   
  - recognizer/patterns/double_pinyin_flypy: "^oup([a-z]+'?)*$"     
  # 响应 单字反查 
  - recognizer/patterns/reverse_lookup: "^`([a-z]+'?)*$" 
  # 关闭拼音单字统配反查
  - recognizer/patterns/reverse_pinyin_lookup: null 

##################################################

  - recognizer/patterns/chinese_lunar: "^(/nl|onl)[0-9]*$"  # 中国农历(可反查)
  - recognizer/patterns/shortcuts_app: "^ojk[a-z]*$"        # 快捷指令(启动应用)
  - recognizer/patterns/shortcuts_cmd: "^okj[a-z]*$"        # 快捷指令(执行命令)
  - recognizer/patterns/chinese_number: "^(/cn|ocn)[0-9.]*$"       # 中文大写数字(金额)
  - recognizer/patterns/help_menu: "^(/oh|obv)$"                  # 帮助菜单

##################################################

##################################################
  # 【重要】读取用户自定义补丁文件
  - jde_fixed.custom:/patch?
##################################################


# 英文翻译器
Eng:
  tag: Eng
  dictionary: melt_eng
  enable_completion: true
  enable_sentence: false
  enable_user_dict: false
  prefix: "E"
  tips: 〔En〕
  comment_format:
    - xform/^.+$//  

# 次翻译器 小鹤双拼(临时音码混输）
double_pinyin_flypy:
  dictionary: pinyin                            # 挂载词库
  enable_encoder:  true                  # 是否启用 自动造词  
  enable_sentence:  true                 # 是否启用造句模式
  encode_commit_history: false     # 是否对已上屛词自动成词  
  enable_completion: false              #  编码提示开关（提前显示尚未输入完整码的字）
  enable_user_dict: true                 # 是否启用用户词典（记录动态字词频、自造词）
  initial_quality: 10                           #初始权重应比其他高  
  preedit_format:  # preedit_format 影响到输入框的显示和“Shift+回车”上屏的字符
    __include: flypy_preedit_format
  tag: double_pinyin_flypy
  prefix: "oup"    
  tips: "〔双拼〕"
  disable_user_dict_for_patterns: 
    - "^[a-z;,./]$"           # 禁止单码字调频
    - "^[a-z;,./][a-z;,./]$"  # 禁止双码字调频

# 中英混合词汇
cn_en:
  dictionary: ""
  user_dict: en_dicts/cn_en_tiger
  db_class: stabledb
  enable_completion: true   # 补全提醒
  enable_sentence: false      # 禁止造句
  initial_quality: 0.5
  comment_format:
    - xform/^.+$//

# 拼音单字反查
reverse_lookup:
  dictionary: reverse_pinyin
  prefix: "`"
  tips: "〔单字〕"
  comment_format:
    - "xform/^/ /"

chaifen:
  option_name: chaifen
  opencc_config: jdh_cf.json
  tips: char        # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
  tags: [ abc, encode, punct, reverse_lookup ]           # 设置其作用范围
  show_in_comment: true   # 是否仅将转换结果显示在备注中
  comment_format:
#      - "xform/-/ /"
#      - "xform/〕〔/｜/"

##################################################


##################################################
# 将小鹤双拼上屏编码转换为全拼
flypy_preedit_format:
    - xform/([bpmfdtnljqx])n/$1iao/
    - xform/(\w)g/$1eng/
    - xform/(\w)q/$1iu/
    - xform/(\w)w/$1ei/
    - xform/([dtnlgkhjqxyvuirzcs])r/$1uan/
    - xform/(\w)t/$1ve/
    - xform/(\w)y/$1un/
    - xform/([dtnlgkhvuirzcs])o/$1uo/
    - xform/(\w)p/$1ie/
    - xform/([jqx])s/$1iong/
    - xform/(\w)s/$1ong/
    - xform/(\w)d/$1ai/
    - xform/(\w)f/$1en/
    - xform/(\w)h/$1ang/
    - xform/(\w)j/$1an/
    - xform/([gkhvuirzcs])k/$1uai/
    - xform/(\w)k/$1ing/
    - xform/([jqxnl])l/$1iang/
    - xform/(\w)l/$1uang/
    - xform/(\w)z/$1ou/
    - xform/([gkhvuirzcs])x/$1ua/
    - xform/(\w)x/$1ia/
    - xform/(\w)c/$1ao/
    - xform/([dtgkhvuirzcs])v/$1ui/
    - xform/(\w)b/$1in/
    - xform/(\w)m/$1ian/
    - xform/([aoe])\1(\w)/$1$2/
    - "xform/(^|[ '])v/$1zh/"
    - "xform/(^|[ '])i/$1ch/"
    - "xform/(^|[ '])u/$1sh/"
    - xform/([jqxy])v/$1u/
    - xform/([nl])v/$1ü/



